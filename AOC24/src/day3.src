import snek.file;


struct Parser
{
	string source;
	int cursor;
}

bool hasNext(Parser* parser) => parser.cursor < parser.source.length;

bool parseCharacter(Parser* parser, char c)
{
	if !hasNext(parser)
		return false;
	return parser.source[parser.cursor++] == c;
}

bool parseDigit(Parser* parser, int* digit)
{
	if !hasNext(parser)
		return false;
	char c = parser.source[parser.cursor++];
	if c >= '0' && c <= '9'
	{
		*digit = c - '0';
		return true;
	}
	return false;
}

bool parseNumber(Parser* parser, int* num)
{
	int digit;
	int result = 0;
	if parseDigit(parser, &digit)
	{
		result = digit;
		if parseDigit(parser, &digit)
		{
			result = result * 10 + digit;
			if parseDigit(parser, &digit)
			{
				result = result * 10 + digit;
			}
		}
		*num = result;
		return true;
	}
	return false;
}

bool parseMul(Parser* parser, int* result)
{
	if parseCharacter(parser, 'm')
	{
		if parseCharacter(parser, 'u')
		{
			if parseCharacter(parser, 'l')
			{
				if parseCharacter(parser, '(')
				{
					int num1;
					if parseNumber(parser, &num1)
					{
						if parseCharacter(parser, ',')
						{
							int num2;
							if parseNumber(parser, &num2)
							{
								if parseCharacter(parser, ')')
								{
									*result = num1 * num2;
									return true;
								}
							}
						}
					}
				}
			}
		}
	}
	return false;
}

public void day3()
{
	string input = file.readText("input3.txt");
	Parser parser;
	parser.source = input;
	parser.cursor = 0;
	
	int result = 0;
	while hasNext(&parser)
	{
		int i;
		if parseMul(&parser, &i)
		{
			result += i;
			writeln(i);
		}
	}
	
	println("Result: %", result);
}