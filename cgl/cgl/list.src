package snek.list;

import snek.math;
import cstring;


public class List
{
	int* buffer;
	int count;
	int capacity;
}

public void reserve(List list, int newCapacity)
{
	int* newBuffer = new int: newCapacity;
	memcpy(newBuffer, list.buffer, min(newCapacity, list.count) * 4);
	delete list.buffer;
	list.buffer = newBuffer;
	list.capacity = newCapacity;
}

public void add(List list, int value)
{
	if list.count == list.capacity
		reserve(list, max(list.capacity * 3 / 2, list.capacity + 1));
	list.buffer[list.count++] = value;
}

public void insert(List list, int idx, int value)
{
	if list.count == list.capacity
		reserve(list, max(list.capacity * 3 / 2, list.capacity + 1));
	for (int i = list.count - 1; i >= idx; i--)
		list.buffer[i + 1] = list.buffer[i];
	list.buffer[idx] = value;
	list.count++;
}

public void removeAt(List list, int idx)
{
	memcpy(&list.buffer[idx + 1], &list.buffer[idx], list.count - idx - 1);
	list.count--;
}

public int get(List list, int idx)
{
	return list.buffer[idx];
}

public void set(List list, int idx, int value)
{
	list.buffer[idx] = value;
}
